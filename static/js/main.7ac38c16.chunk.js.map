{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Picture","props","dataUri","element","this","photoTaken","class","src","id","onTakePhoto","handlePhoto","idealResolution","width","height","React","Component","App","state","body","retakeBtn","onClick","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2LAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,QAAU,GAFE,E,qDAKT,IACJC,EADG,OAWP,OAREA,EADEC,KAAKH,MAAMI,WACH,yBAAKC,MAAM,UAAUC,IAAKH,KAAKF,QAASM,GAAG,QAE3C,kBAAC,IAAD,CAAQC,YAAa,SAAAP,GAC/B,EAAKA,QAAQA,EACb,EAAKD,MAAMS,eACXC,gBAAmB,CAACC,MAAO,IAAKC,OAAQ,OAGnC,6BAAMV,O,GAjBKW,IAAMC,WA8DbC,E,kDAxCb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACXZ,YAAY,EACZa,MAAM,GAJS,E,qDAQT,IACJC,EACAD,EAFG,OAgBP,OAbId,KAAKa,MAAMZ,aACbc,EAAY,4BAAQb,MAAM,UAAUE,GAAG,MAAMY,QAAS,kBAAM,EAAKC,SAAS,CAACH,MAAM,MAArE,iBAGVd,KAAKa,MAAMC,OACbA,EAAO,uBAAGZ,MAAM,WAAT,w7CASP,6BACE,0CACA,yBAAKE,GAAG,QACN,kBAAC,EAAD,CAASH,WAAYD,KAAKa,MAAMZ,WAAYK,YAAa,kBAAM,EAAKW,SAAS,CAAChB,YAAY,OACzFc,GAEH,yBAAKX,GAAG,SACN,4CACCU,Q,GAlCOJ,IAAMC,WCbJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7ac38c16.chunk.js","sourcesContent":["import React, { createRef } from 'react';\nimport Camera from 'react-html5-camera-photo';\nimport './index.css';\n\nclass Picture extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dataUri = '';\n  }\n\n  render() {\n    let element;\n    if (this.props.photoTaken) {\n      element = <img class=\"fade-in\" src={this.dataUri} id=\"pic\" />\n    } else {\n      element = <Camera onTakePhoto={dataUri => {\n      this.dataUri=dataUri;\n      this.props.handlePhoto();}}\n      idealResolution = {{width: 256, height: 144}} />\n    }\n\n    return <div>{element}</div>\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      photoTaken: false,\n      body: false,\n    }\n  }\n\n  render() {\n    let retakeBtn;\n    let body;\n    if (this.state.photoTaken) {\n      retakeBtn = <button class=\"fade-in\" id=\"btn\" onClick={() => this.setState({body: true})} >\n      Retake Photo</button>\n    }\n    if (this.state.body) {\n      body = <p class=\"fade-in\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque eu dui quis arcu porta posuere. Phasellus fermentum egestas viverra. Vivamus quis dolor volutpat, ornare eros eget, posuere orci. Donec dignissim scelerisque nunc sed ullamcorper.\n      Fusce fermentum consectetur odio, et sollicitudin diam vulputate tincidunt. Suspendisse ac semper tellus, quis lacinia libero. Curabitur ante libero, molestie in nisl vitae, elementum finibus libero. Sed et enim ac felis efficitur elementum. Aliquam lobortis est eu enim rutrum ornare.\n      Vestibulum volutpat sem non ex lobortis, eu vestibulum turpis consectetur. Duis a augue eu arcu lobortis rhoncus.Integer placerat molestie erat a molestie. Aliquam interdum placerat ullamcorper. Morbi bibendum dui at dapibus placerat. Vestibulum luctus turpis et cursus varius.\n      Mauris vel tellus in velit dignissim eleifend. Praesent bibendum, nulla scelerisque bibendum commodo, lorem lorem tempor odio, et laoreet ex lectus non enim. In auctor neque sed velit rutrum efficitur. Cras laoreet sem leo, sed maximus tortor laoreet quis. Donec lorem neque, euismod vel tincidunt ac, rutrum ac nulla.\n      Nulla feugiat odio sit amet felis commodo suscipit. Duis ut leo magna. Nullam vehicula venenatis mattis. Nullam cursus tellus eget sapien consectetur rhoncus sit amet sit amet sem. Nullam sed dui faucibus, efficitur velit ut, vestibulum risus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;\n      </p>\n    }\n\n    return (\n      <div>\n        <h1>Am I Ugly?</h1>\n        <div id=\"left\">\n          <Picture photoTaken={this.state.photoTaken} handlePhoto={() => this.setState({photoTaken: true})} />\n          {retakeBtn}\n        </div>\n        <div id=\"right\">\n          <h2>example text</h2>\n          {body}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}